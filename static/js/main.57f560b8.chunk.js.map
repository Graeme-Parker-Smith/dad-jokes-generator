{"version":3,"sources":["Joke.js","JokeList.js","App.js","serviceWorker.js","index.js"],"names":["Joke","this","props","votes","react_default","a","createElement","className","onClick","upvote","style","borderColor","getColor","downvote","text","getEmoji","Component","JokeList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","jokes","JSON","parse","window","localStorage","getItem","loading","seenJokes","Set","map","j","console","log","handleClick","bind","assertThisInitialized","length","getJokes","numJokesToGet","axios","get","headers","Accept","res","newJoke","data","joke","has","push","id","uuid","setState","st","concat","toConsumableArray","setItem","stringify","_this2","alert","_context","t0","delta","_this3","objectSpread","_this4","sort","b","src","alt","src_Joke_0","key","handleVote","defaultProps","App","src_JokeList_0","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.57f560b8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Joke.css';\r\n\r\nclass Joke extends Component {\r\n  getColor(){\r\n    if(this.props.votes >= 15){\r\n      return \"#4CAF50\";\r\n    } else if (this.props.votes >= 12){\r\n      return \"#8BC34A\";\r\n    } else if (this.props.votes >= 9){\r\n      return \"#CDDC39\";\r\n    } else if (this.props.votes >= 6){\r\n      return \"#FFEB3B\";\r\n    }  else if (this.props.votes >= 3){\r\n      return \"#FFC107\";\r\n    } else if (this.props.votes >= 0){\r\n      return \"#FF9800\";\r\n    } else {\r\n      return \"#f44336\"\r\n    }\r\n  }\r\n  getEmoji() {\r\n    if(this.props.votes >= 15){\r\n      return \"em em-rolling_on_the_floor_laughing\";\r\n    } else if (this.props.votes >= 12){\r\n      return \"em em-laughing\";\r\n    } else if (this.props.votes >= 9){\r\n      return \"em em-smiley\";\r\n    } else if (this.props.votes >= 6){\r\n      return \"em em-slightly_smiling_face\";\r\n    }  else if (this.props.votes >= 3){\r\n      return \"em em-neutral_face\";\r\n    } else if (this.props.votes >= 0){\r\n      return \"em em-confused\";\r\n    } else {\r\n      return \"em em-angry\"\r\n    }\r\n  }  \r\n  render() {\r\n    return (\r\n      <div className=\"Joke\">\r\n        <div className=\"Joke-buttons\">\r\n          <i className=\"fas fa-arrow-up\" onClick={this.props.upvote}></i>\r\n          <span className='Joke-votes' style={{borderColor: this.getColor()}}>{this.props.votes}</span>\r\n          <i className=\"fas fa-arrow-down\" onClick={this.props.downvote}></i>\r\n        </div>\r\n        <div className=\"Joke-text\">{this.props.text}</div>\r\n        <div className=\"Joke-smiley\">\r\n          <i className={this.getEmoji()}></i>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Joke;","import React, { Component } from 'react';\r\nimport './JokeList.css';\r\nimport Joke from './Joke';\r\nimport axios from 'axios';\r\nimport uuid from 'uuid/v4';\r\n\r\nclass JokeList extends Component {\r\n  static defaultProps = {\r\n    numJokesToGet: 10\r\n  }\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      jokes: JSON.parse(window.localStorage.getItem(\"jokes\") || \"[]\"),\r\n      loading: false\r\n  };\r\n    this.seenJokes = new Set(this.state.jokes.map(j => j.text));\r\n    console.log(this.seenJokes);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n  componentDidMount(){\r\n    if(this.state.jokes.length === 0) this.getJokes();\r\n  }\r\n  async getJokes(){\r\n    try {\r\n      let jokes = [];\r\n      while(jokes.length < this.props.numJokesToGet){\r\n        let res = await axios.get(\"https://icanhazdadjoke.com/\", {\r\n          headers: { Accept: \"application/json\" }\r\n        });\r\n        let newJoke = res.data.joke;\r\n        if(!this.seenJokes.has(newJoke)){\r\n          jokes.push( {id: uuid(), text: res.data.joke, votes: 0} );\r\n        } else {\r\n          console.log(\"FOUND A DUPLICATE!\");\r\n          console.log(newJoke);\r\n        }\r\n      }\r\n      this.setState(st => ({\r\n        loading: false,\r\n        jokes: [...st.jokes, ...jokes]\r\n      }), () => window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes)))\r\n    } catch(e){\r\n      alert(e);\r\n    }\r\n  }\r\n  handleVote(id, delta){\r\n    this.setState(st => ({\r\n      jokes: st.jokes.map(j =>\r\n        j.id === id ? {...j, votes: j.votes + delta } : j\r\n        )\r\n    }), \r\n    () => window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\r\n    );\r\n  }\r\n  handleClick(){\r\n    this.setState({loading: true}, this.getJokes);\r\n  }\r\n  render(){\r\n    if(this.state.loading) {\r\n      return (\r\n        <div className=\"JokeList-spinner\">\r\n          <i className=\"far fa-8x fa-laugh fa-spin\" />\r\n          <h1 className=\"JokeList-title\">Loading...</h1>\r\n        </div>\r\n      )\r\n    }\r\n    let jokes = this.state.jokes.sort((a, b) => b.votes - a.votes);\r\n    return (\r\n      <div className=\"JokeList\">\r\n        <div className=\"JokeList-sidebar\">\r\n        <h1 className=\"JokeList-title\">\r\n          <span>Dad</span> Jokes\r\n          </h1>\r\n          <img\r\n           src='https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg' alt=\"emoji\" />\r\n          <button className='JokeList-getmore' onClick={this.handleClick}>Fetch Jokes</button>\r\n        </div>\r\n        <div className=\"JokeList-jokes\">\r\n          {jokes.map(j => (\r\n            <Joke \r\n            key={j.id} \r\n            votes={j.votes} \r\n            text={j.text} \r\n            upvote={() => this.handleVote(j.id, 1)} \r\n            downvote={() => this.handleVote(j.id, -1)}\r\n             />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default JokeList;","import React, { Component } from 'react';\nimport JokeList from './JokeList';\nimport './App.css';\n\nclass App extends Component {\n  render(){\n    return (\n      <div className=\"App\">\n        <JokeList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}